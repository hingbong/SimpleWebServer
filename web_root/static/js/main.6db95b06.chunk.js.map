{
  "version": 3,
  "sources": [
    "component/Header.js",
    "component/SearchBar.js",
    "component/Footer.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "Header",
    "props",
    "_this",
    "Object",
    "classCallCheck",
    "this",
    "possibleConstructorReturn",
    "getPrototypeOf",
    "call",
    "toggle",
    "bind",
    "assertThisInitialized",
    "state",
    "isOpen",
    "setState",
    "react_default",
    "a",
    "createElement",
    "className",
    "Navbar",
    "light",
    "style",
    "backgroundColor",
    "expand",
    "NavbarBrand",
    "href",
    "NavbarToggler",
    "onClick",
    "Collapse",
    "navbar",
    "Nav",
    "NavItem",
    "NavLink",
    "Component",
    "SearchBar",
    "window",
    "location",
    "document",
    "querySelector",
    "value",
    "e",
    "keyCode",
    "search",
    "Card",
    "CardBody",
    "CardTitle",
    "Media",
    "id",
    "src",
    "alt",
    "InputGroup",
    "Input",
    "placeholder",
    "onKeyDown",
    "EnterPress",
    "InputGroupAddon",
    "addonType",
    "Button",
    "color",
    "Footer",
    "CardText",
    "App",
    "Header_Header",
    "SearchBar_SearchBar",
    "Footer_Footer",
    "Boolean",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "src_App_0",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister"
  ],
  "mappings": "wUAYqBA,cAEjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,OAASP,EAAKO,OAAOC,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKU,MAAQ,CACXC,QAAQ,GALKX,wEASfG,KAAKS,SAAS,CACZD,QAASR,KAAKO,MAAMC,0CAKtB,OAAOE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACtBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAO,CAACC,gBAAkB,SAAUC,OAAO,MACzDR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAaC,KAAK,KAAlB,kBACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAeC,QAAStB,KAAKI,SAC7BM,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAUf,OAAQR,KAAKO,MAAMC,OAAQgB,QAAM,GACzCd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAKZ,UAAU,UAAUW,QAAM,GAC/Bd,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAASP,KAAK,oBAAd,UAEFV,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAASP,KAAK,+BAAd,sBA3BoBQ,6ECNfC,mLAIbC,OAAOC,SAASX,KAAO,8BAAgCY,SAASC,cAAc,aAAaC,yCAGlFC,GAEQ,KAAdA,EAAEC,SAEHpC,KAAKqC,0CAMT,IAAAxC,EAAAG,KACE,OAAOU,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACP5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KAAW9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAOC,GAAG,OAAOC,IAAI,mBAAmBC,IAAI,SAAQlC,EAAAC,EAAAC,cAAA,2BACjEF,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACAnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAOJ,GAAG,WAAWK,YAAY,8CAA8CC,UAAW,SAACb,GAAKtC,EAAKoD,WAAWd,MAChHzB,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAiBC,UAAU,UAC3BzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAQC,MAAM,UAAU/B,QAAStB,KAAKqC,QAAtC,qBAxB+BT,qBCFlB0B,0LAIb,OAAO5C,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAMzB,UAAU,UACvBH,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,qCAN0B3B,cCoBrB4B,mLAZX,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,eAVY/B,aCKEgC,QACW,cAA7B9B,OAAOC,SAAS8B,UAEe,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASjC,SAASkC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC",
  "file": "static/js/main.6db95b06.chunk.js",
  "sourcesContent": [
    "import React, { Component } from 'react';\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink\n } from 'reactstrap';\n\nexport default class Header extends Component \n{\n    constructor(props) {\n        super(props);\n    \n        this.toggle = this.toggle.bind(this);\n        this.state = {\n          isOpen: false\n        };\n      }\n      toggle() {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n    render()\n    {\n        return <div className=\"header\">\n        <Navbar light style={{'backgroundColor':'white'}} expand=\"md\">\n        <NavbarBrand href=\"/\">Hingbong's web</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n                <NavLink href=\"login/index.html\">Login</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/hingbong\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n        </div>;\n    }\n}",
    "import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Card, CardBody,\n  CardTitle, Button,InputGroup, InputGroupAddon, Input, Media } from 'reactstrap';\n\nexport default class SearchBar extends Component \n{\n    search(){\n        // console.log(document.querySelector('#keywords').value);\n        window.location.href = \"https://www.baidu.com/s?wd=\" + document.querySelector('#keywords').value;\n      }\n\n      EnterPress(e)\n      {\n        if(e.keyCode === 13)\n        { \n          this.search();\n        } \n      }\n      \n\n      render()\n      {\n        return <Card>\n        <CardBody>\n          <CardTitle><Media id=\"logo\" src=\"image/google.png\" alt=\"logo\"/><h1>Baidu Search</h1></CardTitle>\n        <InputGroup>\n        <Input id=\"keywords\" placeholder=\"Input the keywords which you want to search\" onKeyDown={(e)=>{this.EnterPress(e);}}  />\n        <InputGroupAddon addonType=\"append\">\n        <Button color=\"primary\" onClick={this.search}>Search</Button>\n        </InputGroupAddon>\n        </InputGroup>\n        </CardBody>\n      </Card>\n      }\n}",
    "import React, { Component } from 'react';\nimport {\n    Card, CardBody, CardText } from 'reactstrap';\nimport '../App.css';\nexport default class Footer extends Component \n{\n    render()\n    {\n        return <Card className=\"footer\">\n        <CardBody>\n          <CardText>Copyright Â© 2019\n          </CardText>\n        </CardBody>\n      </Card>\n    }\n}\n    ",
    "import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from './component/Header';\nimport SearchBar from './component/SearchBar';\nimport Footer from './component/Footer';\n\nclass App extends Component {\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Header />\n      <div className=\"container\">\n      <SearchBar />\n      <Footer />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}